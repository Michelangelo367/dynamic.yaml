{#- ------------------------------------------------------------------------
### <beg-file_info>
### document_metadata:
###   - date: created="2017-01-01"
###     last: lastmod="2017-01-01"
###     tags: tags
###     author: created="__author__"
###     dmid: "pathinclude_blimp_via_oxtail"
###     filetype: "yaml"
###     lastupdate: "__lastupdate__"
###     desc: |
###         ## UGLY !!!
###         * THIS IS UGLY SYNTAX AND NOISY
###         * TOO MUCH SYNTACTIC NOISE JUST TO GET A FUNCTION_BASED_APPROACH to templates
###         * shows a clunky-syntax way of doing template includes
###         * i do not like this becuase it adds too much boilerplate
###         * see instead an updated version
###     seealso: |
###         * __seealso__
### <end-file_info>
-#}

{#- ------------------------------------------------------------------------
paramdef_001 macro with caller-style syntax
-#}
{%- macro paramdef_001(opts) -%}
  {#- --------------------------------------------- -#}
  {%- set opts = kwargs  -%}
  {%- do opts.update({'varname':'__varname__'})  if( not (opts.varname) )  -%}
  {%- do opts.update({'type':'__type__'})        if( not (opts.type) )  -%}
  {%- do opts.update({'label':'__label__'})      if( not (opts.label) )  -%}
  {%- do opts.update({'description':'__description__'})  if( not (opts.description) )  -%}
  {#- --------------------------------------------- -#}
"{{ opts.varname }}" => array(
  "type" => '{{ opts.type }}',
  "label" => t('{{ opts.label }}'),
  "description" => t('{{ opts.description }}'),
),
  {%- if caller %}{{ caller() -}}{% endif -%}
{%- endmacro -%}

{#- ------------------------------------------------------------------------
simple helloworld macro with caller-style syntax
-#}
{%- macro mmjjsayhello(opts) -%}
  {#- --------------------------------------------- -#}
  {%- set opts    = kwargs  -%}
  {%- set name    = opts.name or 'world'    -%}
  {#- --------------------------------------------- -#}
  Hello {{ name }}!
  {% if caller %}{{ caller() -}}{% endif %}
{%- endmacro -%}

{#- ------------------------------------------------------------------------
simple helloworld-style macro with caller-style syntax
-#}
{%- macro mmsayhello(opts) -%}
  {#- --------------------------------------------- -#}
  {%- set opts = kwargs  -%}
  {#- ------------------------------------------------------------------------
      ANNOYANCE -- jinja2 does not allow arbitrary assignment to dictionary values
        {%- set mydict["mykey"] = "foobar"  -%} <---- this will not work as you expect NO_WORKY

      ANNOYANCE_WORKAROUND_001
        {%- set noop = mydict.update({"mykey":"foobar"}) -%} <---- YES_WORKY

      ANNOYANCE_WORKAROUND_002 (requires the jinja extension "do" [[jinja2.ext.do extension]] )
        {% do mydict.update({"mykey":"foobar"}) %}  <---- YES_WORKY
        {% do mydict.update({"mykey":"foobar"}) if(not opts.foobar) %}  <---- YES_WORKY
  -#}
  {% do opts.update({'fname':'__bLank__'})  if( not (opts.fname) )  %}
  {% do opts.update({'lname':'__Blank__'})  if( not (opts.lname) )  %}
  {% do opts.update({'age':'__blAnk__'})    if( not (opts.age) )    %}
  {#- --------------------------------------------- -#}
  Hello {{ opts.fname }} {{ opts.lname }}!
  {% if caller %}{{ caller() -}}{% endif %}
  Are you {{ opts.age }} years old yet?
{%- endmacro -%}
